// <auto-generated />
using System;
using LocumGQLGateway.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocumGQLGateway.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250814020306_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("slug");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            Description = "Basic personal details and identification info",
                            IsDeleted = false,
                            Name = "Personal Information",
                            Slug = "personal-information",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            Description = "Information about your education background and training",
                            IsDeleted = false,
                            Name = "Education & Training",
                            Slug = "education-training",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            Description = "All professional licenses and certifications",
                            IsDeleted = false,
                            Name = "Licenses & Certifications",
                            Slug = "licenses-certifications",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 1,
                            Description = "Details about your practice locations and affiliations",
                            IsDeleted = false,
                            Name = "Practice & Affiliation",
                            Slug = "practice-affiliation",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedById = 1,
                            Description = "Previous work history and professional references",
                            IsDeleted = false,
                            Name = "Work History & References",
                            Slug = "work-history-references",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            CreatedById = 1,
                            Description = "Claims history and disclosures",
                            IsDeleted = false,
                            Name = "Claims & Disclosures",
                            Slug = "claims-disclosures",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            CreatedById = 1,
                            Description = "Health and legal background information",
                            IsDeleted = false,
                            Name = "Health & Legal History",
                            Slug = "health-legal-history",
                            SortOrder = 7
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.CategoryQuestion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("form_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.HasKey("Id", "CategoryId", "QuestionId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuestionId");

                    b.ToTable("category_question", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            QuestionId = 2
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.ToTable("forms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            Description = "Collects physician personal details, credentials, and licenses for credentialing purposes.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Standard Credentialing Form",
                            Slug = "physician-credentialing"
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<int>("DataType")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("data_type");

                    b.Property<string>("HelpText")
                        .HasColumnType("longtext")
                        .HasColumnName("help_text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("RegexValidation")
                        .HasColumnType("longtext");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedById = 1,
                            DataType = 0,
                            HelpText = "Enter your 10-digit National Provider Identifier (NPI).",
                            IsDeleted = false,
                            RegexValidation = "^\\d{3}[- ]?\\d{3}[- ]?\\d{4}$\n",
                            SortOrder = 1,
                            Text = "NPI"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedById = 1,
                            DataType = 0,
                            HelpText = "Enter your 9-digit Social Security Number (format: XXX-XX-XXXX).",
                            IsDeleted = false,
                            RegexValidation = "^(?!000|666|9\\d{2})\\d{3}-(?!00)\\d{2}-(?!0000)\\d{4}$\n",
                            SortOrder = 2,
                            Text = "SSN"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedById = 1,
                            DataType = 3,
                            HelpText = "Required to determine eligibility for job opportunities.",
                            IsDeleted = false,
                            SortOrder = 1,
                            Text = "Are you authorized to work in the U.S.?"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedById = 1,
                            DataType = 0,
                            HelpText = "Enter the name of the medical school from which you graduated.",
                            IsDeleted = false,
                            SortOrder = 2,
                            Text = "Medical School Name"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CreatedById = 1,
                            DataType = 0,
                            HelpText = "Enter the city where your medical school is located.",
                            IsDeleted = false,
                            SortOrder = 3,
                            Text = "City"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            CreatedById = 1,
                            DataType = 4,
                            HelpText = "Select the state where your medical school is located or where you are licensed to practice.",
                            IsDeleted = false,
                            SortOrder = 4,
                            Text = "State"
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("DisplayText")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("display_text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("question_options");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.UserCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("longtext")
                        .HasColumnName("answer_text");

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime?>("ExpirationDateUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiration_date_utc");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext")
                        .HasColumnName("file_path");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool?>("IsValidated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_validated");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("int")
                        .HasColumnName("selected_option_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("ValidatedAtUtc")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("validated_at_utc");

                    b.Property<int?>("ValidatedById")
                        .HasColumnType("int")
                        .HasColumnName("validated_by_id");

                    b.Property<int>("ValidationMethod")
                        .HasColumnType("int")
                        .HasColumnName("validation_method");

                    b.Property<string>("ValidationNotes")
                        .HasColumnType("longtext")
                        .HasColumnName("validation_notes");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedOptionId");

                    b.HasIndex("ValidatedById");

                    b.ToTable("user_credentials");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_primary");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("postal_code");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Street1")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Street2")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.ToTable("facility_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Hospital"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Clinic"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Urgent Care"
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Rehabilitation Center"
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.ToTable("job_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Full-Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Part-Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Contract"
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Temporary"
                        },
                        new
                        {
                            Id = 5,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Internship"
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.ToTable("location_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Urban"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Suburban"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Rural"
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Remote"
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("preferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            IsDeleted = false,
                            ProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            IsDeleted = false,
                            ProfileId = 2
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            FirstName = "SuperAdmin",
                            IsDeleted = false,
                            LastName = "SuperAdmin",
                            PhoneNumber = "(555) 555-5555",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            PhoneNumber = "(555) 555-5555",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            FirstName = "Locum",
                            IsDeleted = false,
                            LastName = "Locum",
                            PhoneNumber = "(999) 999-9999",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.ProfileNotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CertificateExpirationEmail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("certificate_expiration_email");

                    b.Property<bool>("CertificateExpirationInApp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("certificate_expiration_in_app");

                    b.Property<bool>("CertificateExpirationSms")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("certificate_expiration_sms");

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("CredentialingUpdatesEmail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("credentialing_updates_email");

                    b.Property<bool>("CredentialingUpdatesInApp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("credentialing_updates_in_app");

                    b.Property<bool>("CredentialingUpdatesSms")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("credentialing_updates_sms");

                    b.Property<bool>("GeneralRemindersEmail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("general_reminders_email");

                    b.Property<bool>("GeneralRemindersInApp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("general_reminders_in_app");

                    b.Property<bool>("GeneralRemindersSms")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("general_reminders_sms");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("JobMatchNotificationsEmail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("job_match_notifications_email");

                    b.Property<bool>("JobMatchNotificationsInApp")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("job_match_notifications_in_app");

                    b.Property<bool>("JobMatchNotificationsSms")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("job_match_notifications_sms");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("profile_notification_settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateExpirationEmail = true,
                            CertificateExpirationInApp = true,
                            CertificateExpirationSms = false,
                            CreatedById = 1,
                            CredentialingUpdatesEmail = false,
                            CredentialingUpdatesInApp = false,
                            CredentialingUpdatesSms = false,
                            GeneralRemindersEmail = false,
                            GeneralRemindersInApp = false,
                            GeneralRemindersSms = true,
                            IsDeleted = false,
                            JobMatchNotificationsEmail = false,
                            JobMatchNotificationsInApp = true,
                            JobMatchNotificationsSms = false,
                            ProfileId = 1
                        },
                        new
                        {
                            Id = 2,
                            CertificateExpirationEmail = false,
                            CertificateExpirationInApp = false,
                            CertificateExpirationSms = false,
                            CreatedById = 1,
                            CredentialingUpdatesEmail = false,
                            CredentialingUpdatesInApp = false,
                            CredentialingUpdatesSms = false,
                            GeneralRemindersEmail = false,
                            GeneralRemindersInApp = false,
                            GeneralRemindersSms = false,
                            IsDeleted = false,
                            JobMatchNotificationsEmail = false,
                            JobMatchNotificationsInApp = false,
                            JobMatchNotificationsSms = false,
                            ProfileId = 2
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.ShiftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.ToTable("shift_types");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Morning"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Afternoon"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Evening"
                        },
                        new
                        {
                            Id = 4,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Night"
                        },
                        new
                        {
                            Id = 5,
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "On-Call"
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("abbreviation");

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.ToTable("states");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "AL",
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "AK",
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "AZ",
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "AR",
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "CA",
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "California"
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password_hash");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at_utc")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int")
                        .HasColumnName("updated_by_id");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            Email = "SuperAdmin@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            PasswordHash = "TBD",
                            Role = 0,
                            Username = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            PasswordHash = "TBD",
                            Role = 4,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            Email = "Locum@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            PasswordHash = "TBD",
                            Role = 1,
                            Username = "Locum"
                        });
                });

            modelBuilder.Entity("form_category", b =>
                {
                    b.Property<int>("form_id")
                        .HasColumnType("int");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.HasKey("form_id", "category_id");

                    b.HasIndex("category_id");

                    b.ToTable("form_category", (string)null);

                    b.HasData(
                        new
                        {
                            form_id = 1,
                            category_id = 1
                        },
                        new
                        {
                            form_id = 1,
                            category_id = 2
                        },
                        new
                        {
                            form_id = 1,
                            category_id = 3
                        },
                        new
                        {
                            form_id = 1,
                            category_id = 4
                        },
                        new
                        {
                            form_id = 1,
                            category_id = 5
                        });
                });

            modelBuilder.Entity("preference_facility_type", b =>
                {
                    b.Property<int>("facility_type_id")
                        .HasColumnType("int");

                    b.Property<int>("preference_id")
                        .HasColumnType("int");

                    b.HasKey("facility_type_id", "preference_id");

                    b.HasIndex("preference_id");

                    b.ToTable("preference_facility_type", (string)null);

                    b.HasData(
                        new
                        {
                            facility_type_id = 1,
                            preference_id = 1
                        },
                        new
                        {
                            facility_type_id = 2,
                            preference_id = 1
                        });
                });

            modelBuilder.Entity("preference_job_type", b =>
                {
                    b.Property<int>("job_type_id")
                        .HasColumnType("int");

                    b.Property<int>("preference_id")
                        .HasColumnType("int");

                    b.HasKey("job_type_id", "preference_id");

                    b.HasIndex("preference_id");

                    b.ToTable("preference_job_type", (string)null);

                    b.HasData(
                        new
                        {
                            job_type_id = 1,
                            preference_id = 1
                        },
                        new
                        {
                            job_type_id = 2,
                            preference_id = 1
                        });
                });

            modelBuilder.Entity("preference_location_type", b =>
                {
                    b.Property<int>("location_type_id")
                        .HasColumnType("int");

                    b.Property<int>("preference_id")
                        .HasColumnType("int");

                    b.HasKey("location_type_id", "preference_id");

                    b.HasIndex("preference_id");

                    b.ToTable("preference_location_type", (string)null);

                    b.HasData(
                        new
                        {
                            location_type_id = 1,
                            preference_id = 1
                        },
                        new
                        {
                            location_type_id = 2,
                            preference_id = 1
                        });
                });

            modelBuilder.Entity("preference_shift_type", b =>
                {
                    b.Property<int>("shift_type_id")
                        .HasColumnType("int");

                    b.Property<int>("preference_id")
                        .HasColumnType("int");

                    b.HasKey("shift_type_id", "preference_id");

                    b.HasIndex("preference_id");

                    b.ToTable("preference_shift_type", (string)null);

                    b.HasData(
                        new
                        {
                            shift_type_id = 1,
                            preference_id = 1
                        },
                        new
                        {
                            shift_type_id = 2,
                            preference_id = 1
                        });
                });

            modelBuilder.Entity("preference_state", b =>
                {
                    b.Property<int>("state_id")
                        .HasColumnType("int");

                    b.Property<int>("preference_id")
                        .HasColumnType("int");

                    b.HasKey("state_id", "preference_id");

                    b.HasIndex("preference_id");

                    b.ToTable("preference_state", (string)null);

                    b.HasData(
                        new
                        {
                            state_id = 1,
                            preference_id = 1
                        },
                        new
                        {
                            state_id = 2,
                            preference_id = 1
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.CategoryQuestion", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Credentials.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Credentials.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.Question", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Credentials.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.QuestionOption", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Credentials.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.UserCredential", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Credentials.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Credentials.QuestionOption", "SelectedOption")
                        .WithMany()
                        .HasForeignKey("SelectedOptionId");

                    b.HasOne("LocumGQLGateway.Models.User", "ValidatedBy")
                        .WithMany()
                        .HasForeignKey("ValidatedById");

                    b.Navigation("Question");

                    b.Navigation("SelectedOption");

                    b.Navigation("ValidatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Address", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.Profile", "Profile")
                        .WithOne("Address")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.Address", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Profile");

                    b.Navigation("State");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Preference", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.Profile", "Profile")
                        .WithOne("Preference")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.Preference", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Profile", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.ProfileNotificationSettings", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.Profile", "Profile")
                        .WithOne("ProfileNotificationSettings")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.ProfileNotificationSettings", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("form_category", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Credentials.Category", null)
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Credentials.Form", null)
                        .WithMany()
                        .HasForeignKey("form_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("preference_facility_type", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.FacilityType", null)
                        .WithMany()
                        .HasForeignKey("facility_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("preference_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("preference_job_type", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.JobType", null)
                        .WithMany()
                        .HasForeignKey("job_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("preference_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("preference_location_type", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.LocationType", null)
                        .WithMany()
                        .HasForeignKey("location_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("preference_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("preference_shift_type", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("preference_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.ShiftType", null)
                        .WithMany()
                        .HasForeignKey("shift_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("preference_state", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("preference_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.State", null)
                        .WithMany()
                        .HasForeignKey("state_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.Category", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Credentials.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Profile", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Preference");

                    b.Navigation("ProfileNotificationSettings");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
