// <auto-generated />
using System;
using LocumGQLGateway.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocumGQLGateway.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Street1")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Street2")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.FacilityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("FacilityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(730),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Hospital",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(730)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(740),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Clinic",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(740)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(740),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Urgent Care",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(740)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(740),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Rehabilitation Center",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(740)
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Full-Time",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Part-Time",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Contract",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Temporary",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Internship",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(950)
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("LocationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Urban",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Suburban",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Rural",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Remote",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1040)
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Preferences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1110),
                            CreatedById = 1,
                            IsDeleted = false,
                            ProfileId = 1,
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1110)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1110),
                            CreatedById = 1,
                            IsDeleted = false,
                            ProfileId = 2,
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1110)
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1080),
                            CreatedById = 1,
                            FirstName = "SuperAdmin",
                            IsDeleted = false,
                            LastName = "SuperAdmin",
                            PhoneNumber = "(555) 555-5555",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1080),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1090),
                            CreatedById = 1,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            PhoneNumber = "(555) 555-5555",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1090),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1090),
                            CreatedById = 1,
                            FirstName = "Locum",
                            IsDeleted = false,
                            LastName = "Locum",
                            PhoneNumber = "(999) 999-9999",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1090),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.ProfileNotificationSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CertificateExpirationEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CertificateExpirationInApp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CertificateExpirationSms")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("CredentialingUpdatesEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CredentialingUpdatesInApp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CredentialingUpdatesSms")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GeneralRemindersEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GeneralRemindersInApp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("GeneralRemindersSms")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("JobMatchNotificationsEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("JobMatchNotificationsInApp")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("JobMatchNotificationsSms")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("ProfileNotificationSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificateExpirationEmail = true,
                            CertificateExpirationInApp = true,
                            CertificateExpirationSms = false,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1200),
                            CreatedById = 1,
                            CredentialingUpdatesEmail = false,
                            CredentialingUpdatesInApp = false,
                            CredentialingUpdatesSms = false,
                            GeneralRemindersEmail = false,
                            GeneralRemindersInApp = false,
                            GeneralRemindersSms = true,
                            IsDeleted = false,
                            JobMatchNotificationsEmail = false,
                            JobMatchNotificationsInApp = true,
                            JobMatchNotificationsSms = false,
                            ProfileId = 1,
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1200)
                        },
                        new
                        {
                            Id = 2,
                            CertificateExpirationEmail = false,
                            CertificateExpirationInApp = false,
                            CertificateExpirationSms = false,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1200),
                            CreatedById = 1,
                            CredentialingUpdatesEmail = false,
                            CredentialingUpdatesInApp = false,
                            CredentialingUpdatesSms = false,
                            GeneralRemindersEmail = false,
                            GeneralRemindersInApp = false,
                            GeneralRemindersSms = false,
                            IsDeleted = false,
                            JobMatchNotificationsEmail = false,
                            JobMatchNotificationsInApp = false,
                            JobMatchNotificationsSms = false,
                            ProfileId = 2,
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1200)
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.ShiftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ShiftTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(970),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Morning",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(970)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(970),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Afternoon",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(970)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(970),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Evening",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(970)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(970),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Night",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(980)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(980),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "On-Call",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(980)
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "AL",
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Alabama",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060)
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "AK",
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Alaska",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060)
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "AZ",
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Arizona",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060)
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "AR",
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "Arkansas",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060)
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "CA",
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060),
                            CreatedById = 1,
                            IsDeleted = false,
                            Name = "California",
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1060)
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1000),
                            CreatedById = 1,
                            Email = "SuperAdmin@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            PasswordHash = "TBD",
                            Role = 0,
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1000),
                            Username = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1000),
                            CreatedById = 1,
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            PasswordHash = "TBD",
                            Role = 4,
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1000),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1000),
                            CreatedById = 1,
                            Email = "Locum@example.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            PasswordHash = "TBD",
                            Role = 1,
                            UpdatedAtUtc = new DateTime(2025, 8, 13, 2, 13, 25, 402, DateTimeKind.Utc).AddTicks(1000),
                            Username = "Locum"
                        });
                });

            modelBuilder.Entity("PreferenceFacilityType", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityTypeId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "FacilityTypeId");

                    b.HasIndex("FacilityTypeId");

                    b.ToTable("PreferenceFacilityType");

                    b.HasData(
                        new
                        {
                            PreferenceId = 2,
                            FacilityTypeId = 1
                        },
                        new
                        {
                            PreferenceId = 2,
                            FacilityTypeId = 2
                        });
                });

            modelBuilder.Entity("PreferenceJobType", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "JobTypeId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("PreferenceJobType");

                    b.HasData(
                        new
                        {
                            PreferenceId = 2,
                            JobTypeId = 1
                        },
                        new
                        {
                            PreferenceId = 2,
                            JobTypeId = 2
                        });
                });

            modelBuilder.Entity("PreferenceLocationType", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("LocationTypeId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "LocationTypeId");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("PreferenceLocationType");

                    b.HasData(
                        new
                        {
                            PreferenceId = 2,
                            LocationTypeId = 1
                        },
                        new
                        {
                            PreferenceId = 2,
                            LocationTypeId = 3
                        });
                });

            modelBuilder.Entity("PreferenceShiftType", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftTypeId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "ShiftTypeId");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("PreferenceShiftType");

                    b.HasData(
                        new
                        {
                            PreferenceId = 2,
                            ShiftTypeId = 1
                        },
                        new
                        {
                            PreferenceId = 2,
                            ShiftTypeId = 2
                        });
                });

            modelBuilder.Entity("PreferenceState", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId", "StateId");

                    b.HasIndex("StateId");

                    b.ToTable("PreferenceState");

                    b.HasData(
                        new
                        {
                            PreferenceId = 2,
                            StateId = 1
                        },
                        new
                        {
                            PreferenceId = 2,
                            StateId = 5
                        });
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Address", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Profile", "Profile")
                        .WithOne("Address")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.Address", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Profile");

                    b.Navigation("State");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.FacilityType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.JobType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.LocationType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Preference", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Profile", "Profile")
                        .WithOne("Preference")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.Preference", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Profile");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Profile", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("LocumGQLGateway.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.ProfileNotificationSettings", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Profile", "Profile")
                        .WithOne("ProfileNotificationSettings")
                        .HasForeignKey("LocumGQLGateway.Models.Profiles.ProfileNotificationSettings", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("Profile");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.ShiftType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.State", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.User", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("PreferenceFacilityType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.FacilityType", null)
                        .WithMany()
                        .HasForeignKey("FacilityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreferenceJobType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.JobType", null)
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreferenceLocationType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.LocationType", null)
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreferenceShiftType", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.ShiftType", null)
                        .WithMany()
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreferenceState", b =>
                {
                    b.HasOne("LocumGQLGateway.Models.Profiles.Preference", null)
                        .WithMany()
                        .HasForeignKey("PreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocumGQLGateway.Models.Profiles.State", null)
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocumGQLGateway.Models.Profiles.Profile", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Preference");

                    b.Navigation("ProfileNotificationSettings");
                });

            modelBuilder.Entity("LocumGQLGateway.Models.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
